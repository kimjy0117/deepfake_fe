openapi: 3.0.3
info:
  title: DeepFake Gallery API
  description: 이미지 및 영상 갤러리 서비스 API
  version: 1.0.0
  contact:
    name: DeepFake Gallery Support
    email: support@deepfakegallery.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://api.deepfakegallery.com/v1
    description: Production server

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: 사용자 인증 관련 API
  - name: Files
    description: 파일 업로드, 조회, 삭제 관련 API
  - name: Gallery
    description: 갤러리 통계 및 관리 관련 API

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 회원가입
      description: 새로운 사용자 계정을 생성합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 로그인
      description: 사용자 인증 후 JWT 토큰을 발급합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: 토큰 갱신
      description: 리프레시 토큰을 사용하여 새로운 액세스 토큰을 발급합니다
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 토큰 갱신 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/me:
    get:
      tags:
        - Users
      summary: 내 정보 조회
      description: 현재 로그인한 사용자의 정보를 조회합니다
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/upload:
    post:
      tags:
        - Files
      summary: 파일 업로드
      description: 이미지 또는 영상 파일을 업로드합니다
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: 업로드할 파일들 (최대 10개)
                titles:
                  type: array
                  items:
                    type: string
                    maxLength: 100
                  description: 각 파일에 대응하는 제목들 (files 배열과 순서 동일)
              required:
                - files
                - titles
      responses:
        '201':
          description: 파일 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "파일 업로드가 완료되었습니다"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FileItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          description: 파일 크기 초과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/my:
    get:
      tags:
        - Files
      summary: 내 파일 목록 조회
      description: 현재 사용자가 업로드한 파일 목록을 조회합니다
      parameters:
        - name: type
          in: query
          description: 파일 타입 필터
          schema:
            type: string
            enum: [image, video, all]
            default: all
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [uploadedAt, name, size]
            default: uploadedAt
        - name: order
          in: query
          description: 정렬 순서
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 파일 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/public:
    get:
      tags:
        - Files
      summary: 공개 파일 목록 조회
      description: 모든 사용자가 업로드한 공개 파일 목록을 조회합니다
      security: []
      parameters:
        - name: type
          in: query
          description: 파일 타입 필터
          schema:
            type: string
            enum: [image, video, all]
            default: all
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [uploadedAt, name, size]
            default: uploadedAt
        - name: order
          in: query
          description: 정렬 순서
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 공개 파일 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicFileListResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/search:
    get:
      tags:
        - Files
      summary: 파일 검색
      description: 제목, 파일명, 업로더명으로 파일을 검색합니다
      security: []
      parameters:
        - name: q
          in: query
          required: true
          description: 검색 키워드
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: type
          in: query
          description: 파일 타입 필터
          schema:
            type: string
            enum: [image, video, all]
            default: all
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 검색 결과 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicFileListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /gallery/stats:
    get:
      tags:
        - Gallery
      summary: 갤러리 통계 조회
      description: 전체 갤러리의 통계 정보를 조회합니다
      security: []
      responses:
        '200':
          description: 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GalleryStatsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/{fileId}:
    get:
      tags:
        - Files
      summary: 파일 상세 정보 조회
      description: 특정 파일의 상세 정보를 조회합니다
      security: []
      parameters:
        - name: fileId
          in: path
          required: true
          description: 파일 ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 파일 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetailResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Files
      summary: 파일 삭제
      description: 본인이 업로드한 파일을 삭제합니다
      parameters:
        - name: fileId
          in: path
          required: true
          description: 파일 ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 파일 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "파일이 삭제되었습니다"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Files
      summary: 파일 정보 수정
      description: 파일의 제목 등 메타데이터를 수정합니다 (본인 파일만 수정 가능)
      parameters:
        - name: fileId
          in: path
          required: true
          description: 파일 ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 100
                  description: 파일 제목
                  example: "수정된 제목"
              required:
                - title
      responses:
        '200':
          description: 파일 정보 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "파일 정보가 수정되었습니다"
                  data:
                    $ref: '#/components/schemas/FileItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/{fileId}/download:
    get:
      tags:
        - Files
      summary: 파일 다운로드
      description: 파일을 다운로드합니다
      security: []
      parameters:
        - name: fileId
          in: path
          required: true
          description: 파일 ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 파일 다운로드 성공
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /gallery/stats:
    get:
      tags:
        - Gallery
      summary: 갤러리 통계 조회
      description: 전체 갤러리의 통계 정보를 조회합니다
      security: []
      responses:
        '200':
          description: 갤러리 통계 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GalleryStatsResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /files/{fileId}/stream:
    get:
      tags:
        - Files
      summary: 파일 스트리밍
      description: 이미지나 영상 파일을 스트리밍으로 제공합니다 (Range 요청 지원)
      security: []
      parameters:
        - name: fileId
          in: path
          required: true
          description: 파일 ID
          schema:
            type: integer
            format: int64
        - name: Range
          in: header
          required: false
          description: HTTP Range 헤더 (영상 스트리밍용)
          schema:
            type: string
            example: "bytes=0-1023"
      responses:
        '200':
          description: 전체 파일 스트리밍
          headers:
            Content-Type:
              description: 파일의 MIME 타입
              schema:
                type: string
                example: "image/jpeg"
            Content-Length:
              description: 파일 크기
              schema:
                type: integer
                example: 1048576
            Accept-Ranges:
              description: Range 요청 지원 여부
              schema:
                type: string
                example: "bytes"
          content:
            image/*:
              schema:
                type: string
                format: binary
            video/*:
              schema:
                type: string
                format: binary
        '206':
          description: 부분 파일 스트리밍 (Range 요청)
          headers:
            Content-Type:
              description: 파일의 MIME 타입
              schema:
                type: string
                example: "video/mp4"
            Content-Range:
              description: 전송되는 바이트 범위
              schema:
                type: string
                example: "bytes 0-1023/2048576"
            Content-Length:
              description: 전송되는 바이트 수
              schema:
                type: integer
                example: 1024
          content:
            video/*:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '416':
          description: Range Not Satisfiable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "요청한 범위가 유효하지 않습니다"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 6
          example: "password123"
        name:
          type: string
          minLength: 2
          maxLength: 50
          example: "홍길동"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "로그인이 완료되었습니다"
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              $ref: '#/components/schemas/TokenResponse'

    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "홍길동"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    FileItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "sample-image.jpg"
        title:
          type: string
          example: "내가 찍은 아름다운 풍경"
        originalName:
          type: string
          example: "내 사진.jpg"
        url:
          type: string
          format: uri
          example: "https://api.deepfakegallery.com/files/1/download"
        thumbnailUrl:
          type: string
          format: uri
          example: "https://api.deepfakegallery.com/files/1/thumbnail"
        size:
          type: integer
          format: int64
          example: 1024000
        type:
          type: string
          enum: [image, video]
          example: "image"
        mimeType:
          type: string
          example: "image/jpeg"
        userId:
          type: integer
          format: int64
          example: 1
        uploadedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

    PublicFileItem:
      allOf:
        - $ref: '#/components/schemas/FileItem'
        - type: object
          properties:
            userName:
              type: string
              example: "홍길동"

    FileListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/FileItem'
            pagination:
              $ref: '#/components/schemas/Pagination'

    PublicFileListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/PublicFileItem'
            pagination:
              $ref: '#/components/schemas/Pagination'

    FileDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/PublicFileItem'

    GalleryStatsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            totalFiles:
              type: integer
              example: 150
            totalImages:
              type: integer
              example: 100
            totalVideos:
              type: integer
              example: 50
            totalUsers:
              type: integer
              example: 25
            totalSize:
              type: integer
              format: int64
              example: 1073741824

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 20
        totalElements:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5
        hasNext:
          type: boolean
          example: true
        hasPrevious:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errorCode:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "입력값이 올바르지 않습니다"
        details:
          type: array
          items:
            type: string
          example: ["이메일 형식이 올바르지 않습니다"]
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

  responses:
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "BAD_REQUEST"
            message: "요청 데이터가 올바르지 않습니다"
            timestamp: "2024-01-01T00:00:00Z"

    Unauthorized:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "UNAUTHORIZED"
            message: "인증이 필요합니다"
            timestamp: "2024-01-01T00:00:00Z"

    Forbidden:
      description: 권한 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "FORBIDDEN"
            message: "접근 권한이 없습니다"
            timestamp: "2024-01-01T00:00:00Z"

    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "NOT_FOUND"
            message: "요청한 리소스를 찾을 수 없습니다"
            timestamp: "2024-01-01T00:00:00Z"

    Conflict:
      description: 리소스 충돌
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "CONFLICT"
            message: "이미 존재하는 리소스입니다"
            timestamp: "2024-01-01T00:00:00Z"

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            errorCode: "INTERNAL_SERVER_ERROR"
            message: "서버 내부 오류가 발생했습니다"
            timestamp: "2024-01-01T00:00:00Z"

tags:
  - name: Authentication
    description: 사용자 인증 관련 API
  - name: Users
    description: 사용자 정보 관련 API
  - name: Files
    description: 파일 관리 관련 API
  - name: Gallery
    description: 갤러리 관련 API

